{"version":3,"sources":["Cell.js","Field.js","App.js","index.js"],"names":["Cell","row","col","color","onClick","style","top","left","backgroundColor","onClickCallback","useCallback","className","Field","props","cells","flatMap","map","key","onCellClick","range","count","result","i","push","getRandomColor","random","Math","copyMatrix","matrix","cell","getAdjacentCellsOfSameColor","rowsCount","length","colsCount","filter","getAdjacentCells","doesAnyCellHaveSameColorNeighbour","some","_","moveColumnsDown","cellsCopy","forEach","index","column","colIndex","getColumn","colors","mutateColumnColors","reducer","state","action","type","queue","pop","adjacentCellsOfSameColor","unshift","removeCellsOfSameColor","data","movedCells","isGameOver","initState","width","height","App","useReducer","dispatch","gameOverLabel","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9003b35d.chunk.js","sourcesContent":["import React, {useCallback} from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Cell.css';\n\nconst CELL_SIZE = 50;\n\nexport default function Cell({row, col, color, onClick}) {\n\n  const style = {\n    top: row * CELL_SIZE,\n    left: col * CELL_SIZE,\n    backgroundColor: color,\n  };\n\n  const onClickCallback = useCallback(() => onClick({row, col, color}), [\n    onClick,\n    row,\n    col,\n    color,\n  ]);\n\n  return <div className=\"Cell\" style={style} onClick={onClickCallback} />;\n}\n\nCell.propTypes = {\n  row: PropTypes.number,\n  col: PropTypes.number,\n  color: PropTypes.string,\n  onClick: PropTypes.func,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Cell from './Cell';\n\nimport './Field.css';\n\nexport default function Field(props) {\n  const cells = props.cells.flatMap(row =>\n    row.map(({row, col, color}) => (\n      <Cell\n        key={row + '-' + col}\n        row={row}\n        col={col}\n        color={color}\n        onClick={props.onCellClick}\n      />\n    )),\n  );\n  return <div className=\"Field\">{cells}</div>;\n}\n\nField.propTypes = {\n  cells: PropTypes.array,\n  onCellClick: PropTypes.func,\n};\n","import React, {useReducer, useCallback} from 'react';\n\nimport Field from './Field';\n\nimport './App.css';\n\nconst range = count => {\n  const result = [];\n  for (let i = 0; i < count; i++) {\n    result.push(null);\n  }\n  return result;\n};\n\nconst getRandomColor = () => {\n  const random = Math.random();\n  if (random < 0.25) {\n    return 'red';\n  } else if (random < 0.5) {\n    return 'green';\n  } else if (random < 0.75) {\n    return 'blue';\n  } else {\n    return 'yellow';\n  }\n};\n\nconst copyMatrix = matrix => matrix.map(row => row.map(cell => ({...cell})));\n\nconst getColumn = (cells, colIndex) => {\n  const rowsCount = cells.length;\n  return range(rowsCount).map((_, row) => cells[row][colIndex]);\n};\n\nconst mutateColumnColors = (cells, colIndex, colors) => {\n  const rowsCount = cells.length;\n  range(rowsCount).forEach((_, row) => {\n    cells[row][colIndex].color = colors[row];\n  });\n  return cells;\n};\n\nconst getAdjacentCells = (cells, {row, col}) => {\n  const rowsCount = cells.length;\n  const colsCount = cells[0].length;\n  return [\n    {row: row - 1, col},\n    {row, col: col + 1},\n    {row: row + 1, col},\n    {row, col: col - 1},\n  ]\n    .filter(\n      ({row, col}) =>\n        0 <= row && row < rowsCount && 0 <= col && col < colsCount,\n    )\n    .map(({row, col}) => cells[row][col]);\n};\n\nconst getAdjacentCellsOfSameColor = (cells, {row, col}, color) => {\n  return getAdjacentCells(cells, {row, col}).filter(\n    cell => cell.color === color,\n  );\n};\n\nconst doesAnyCellHaveSameColorNeighbour = cells => {\n  const rowsCount = cells.length;\n  const colsCount = cells[0].length;\n\n  return range(rowsCount).some((_, row) =>\n    range(colsCount).some((_, col) => {\n      const cell = cells[row][col];\n\n      if (cell.color === null) {\n        return false;\n      }\n\n      return (\n        getAdjacentCellsOfSameColor(cells, {row, col}, cell.color).length > 0\n      );\n    }),\n  );\n};\n\n/**\n * This function implements a BFS, using queue here helps to avoid limitation of call stack size (in case of\n * recursive solution)\n */\nconst removeCellsOfSameColor = (cells, {col, row, color}) => {\n  if (getAdjacentCellsOfSameColor(cells, {col, row}, color).length === 0) {\n    return cells;\n  }\n\n  const cellsCopy = copyMatrix(cells);\n  const queue = [cellsCopy[row][col]];\n  cellsCopy[row][col].color = null;\n\n  while (queue.length > 0) {\n    const cell = queue.pop();\n    const adjacentCellsOfSameColor = getAdjacentCellsOfSameColor(\n      cellsCopy,\n      cell,\n      color,\n    );\n\n    adjacentCellsOfSameColor.forEach(({row, col}) => {\n      cellsCopy[row][col].color = null;\n    });\n\n    queue.unshift(...adjacentCellsOfSameColor);\n  }\n\n  return cellsCopy;\n};\n\n/**\n * One of other possible ways to solve this is to store a transposed matrix and move it to the left (inside of moving\n * it down). This will make `getColumn` and  `mutateColumnColors` functions redundant. It should be a more optimal\n * solution, but it comes with a trade-off of unusual/inconvinient matrix dimensions, so I decided to stick to\n * this approach.\n */\nconst moveColumnsDown = cells => {\n  const colsCount = cells[0].length;\n  let cellsCopy = copyMatrix(cells);\n\n  range(colsCount).forEach((_, index) => {\n    const column = getColumn(cellsCopy, index);\n\n    const colors = column\n      .map(cell => cell.color)\n      .filter(color => color !== null);\n\n    cellsCopy = mutateColumnColors(cellsCopy, index, [\n      ...range(column.length - colors.length),\n      ...colors,\n    ]);\n  });\n\n  return cellsCopy;\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'CELL_CLICK': {\n      const cells = removeCellsOfSameColor(state.cells, action.data);\n      const movedCells = moveColumnsDown(cells);\n      return {\n        cells: movedCells,\n        isGameOver: !doesAnyCellHaveSameColorNeighbour(movedCells),\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nconst initState = ({width, height}) => {\n  const cells = range(height).map((_, row) => {\n    return range(width).map((_, col) => ({\n      row,\n      col,\n      color: getRandomColor(),\n    }));\n  });\n  return {cells};\n};\n\nfunction App() {\n  const [state, dispatch] = useReducer(\n    reducer,\n    {width: 10, height: 10},\n    initState,\n  );\n\n  const onCellClick = useCallback(\n    data => dispatch({type: 'CELL_CLICK', data}),\n    [],\n  );\n\n  const gameOverLabel =\n    state.isGameOver ? (\n      <div className=\"App__game-over-label\">\n        <h2>Game over!</h2>\n        <p>Press ⌘-R or Ctrl-R to restart</p>\n      </div>\n    ) : null;\n\n  return (\n    <div>\n      <div className=\"App__field\">\n        <Field cells={state.cells} onCellClick={onCellClick} />\n      </div>\n      {gameOverLabel}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}